{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x684aa18e0c228d291d39cf57192cfa4f7822bbcc96fc91214452cbfc572e0581",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1027125",
    "logsBloom": "0x
    "blockHash": "0x27954c993e5b65e8a697a3b1494e76e06083fdbc266d4b6ce5e28e9beacde101",
    "transactionHash": "0x684aa18e0c228d291d39cf57192cfa4f7822bbcc96fc91214452cbfc572e0581",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1027125",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "12cfb55290dc06ebacf64c4463148bd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jaffar Totanji\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"},\"withdraw()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crown funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds the contracts\"},\"withdraw()\":{\"notice\":\"This function allows the owner to withdraw funds\"}},\"notice\":\"This contract is a demo used for practice\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. pragma\\npragma solidity ^0.8.0;\\n\\n// 2. imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts, Errors\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crown funding\\n *  @author Jaffar Totanji\\n *  @notice This contract is a demo used for practice\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmount;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner!!!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds the contracts\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\\n            \\\"too low\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmount[msg.sender] += msg.value;\\n    }\\n\\n    /**\\n     *  @notice This function allows the owner to withdraw funds\\n     *  @dev This implements price feeds as our library\\n     */\\n    function withdraw() public payable onlyOwner {\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_addressToAmount[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            s_addressToAmount[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmount(address funder) public view returns (uint256) {\\n        return s_addressToAmount[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x3fff6f599371e7231df9c946a1e486a33ea234344197318d0a2ad1c966f4ed6f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x410a16215136f3a1e199f1b37a85b9bee606002ce7afddf67178d43d47b0d248\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012b5380380620012b5833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111366200017f600039600081816102ed01528181610506015261055601526111366000f3fe60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610123578063be2693f01461012d578063c0f8cffc14610137578063d7b4750c146101745761008e565b80633ccfd60b146100985780636b69a592146100a2578063893d20e8146100cd5780639e87a5cd146100f85761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b6100a06102eb565b005b3480156100ae57600080fd5b506100b76104f5565b6040516100c49190610a24565b60405180910390f35b3480156100d957600080fd5b506100e2610502565b6040516100ef9190610a80565b60405180910390f35b34801561010457600080fd5b5061010d61052a565b60405161011a9190610afa565b60405180910390f35b61012b6101b1565b005b610135610554565b005b34801561014357600080fd5b5061015e60048036038101906101599190610b46565b6107f8565b60405161016b9190610a24565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190610b9f565b610841565b6040516101a89190610a80565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088890919063ffffffff16565b11610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022790610c29565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e29190610c78565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610370576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041b57600080828154811061039557610394610cce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041390610cfd565b915050610373565b50600067ffffffffffffffff81111561043757610436610d46565b5b6040519080825280602002602001820160405280156104655781602001602082028036833780820191505090505b506000908051906020019061047b929190610964565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a290610da6565b60006040518083038185875af1925050503d80600081146104df576040519150601f19603f3d011682016040523d82523d6000602084013e6104e4565b606091505b50509050806104f257600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561065c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610612575b5050505050905060005b81518110156106e757600082828151811061068457610683610cce565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106df90610cfd565b915050610666565b50600067ffffffffffffffff81111561070357610702610d46565b5b6040519080825280602002602001820160405280156107315781602001602082028036833780820191505090505b5060009080519060200190610747929190610964565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161076e90610da6565b60006040518083038185875af1925050503d80600081146107ab576040519150601f19603f3d011682016040523d82523d6000602084013e6107b0565b606091505b50509050806107f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107eb90610e07565b60405180910390fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061085657610855610cce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610894836108c4565b90506000670de0b6b3a764000082866108ad9190610e27565b6108b79190610eb0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610f6e565b5050509150506402540be4008161095c9190610fe9565b915050919050565b8280548282559060005260206000209081019282156109dd579160200282015b828111156109dc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610984565b5b5090506109ea91906109ee565b5090565b5b80821115610a075760008160009055506001016109ef565b5090565b6000819050919050565b610a1e81610a0b565b82525050565b6000602082019050610a396000830184610a15565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6a82610a3f565b9050919050565b610a7a81610a5f565b82525050565b6000602082019050610a956000830184610a71565b92915050565b6000819050919050565b6000610ac0610abb610ab684610a3f565b610a9b565b610a3f565b9050919050565b6000610ad282610aa5565b9050919050565b6000610ae482610ac7565b9050919050565b610af481610ad9565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b600080fd5b610b2381610a5f565b8114610b2e57600080fd5b50565b600081359050610b4081610b1a565b92915050565b600060208284031215610b5c57610b5b610b15565b5b6000610b6a84828501610b31565b91505092915050565b610b7c81610a0b565b8114610b8757600080fd5b50565b600081359050610b9981610b73565b92915050565b600060208284031215610bb557610bb4610b15565b5b6000610bc384828501610b8a565b91505092915050565b600082825260208201905092915050565b7f746f6f206c6f7700000000000000000000000000000000000000000000000000600082015250565b6000610c13600783610bcc565b9150610c1e82610bdd565b602082019050919050565b60006020820190508181036000830152610c4281610c06565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8382610a0b565b9150610c8e83610a0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc357610cc2610c49565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d0882610a0b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3b57610d3a610c49565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d90600083610d75565b9150610d9b82610d80565b600082019050919050565b6000610db182610d83565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610df1601483610bcc565b9150610dfc82610dbb565b602082019050919050565b60006020820190508181036000830152610e2081610de4565b9050919050565b6000610e3282610a0b565b9150610e3d83610a0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7657610e75610c49565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ebb82610a0b565b9150610ec683610a0b565b925082610ed657610ed5610e81565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0081610ee1565b8114610f0b57600080fd5b50565b600081519050610f1d81610ef7565b92915050565b6000819050919050565b610f3681610f23565b8114610f4157600080fd5b50565b600081519050610f5381610f2d565b92915050565b600081519050610f6881610b73565b92915050565b600080600080600060a08688031215610f8a57610f89610b15565b5b6000610f9888828901610f0e565b9550506020610fa988828901610f44565b9450506040610fba88828901610f59565b9350506060610fcb88828901610f59565b9250506080610fdc88828901610f0e565b9150509295509295909350565b6000610ff482610f23565b9150610fff83610f23565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103e5761103d610c49565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561107b5761107a610c49565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110b8576110b7610c49565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110f5576110f4610c49565b5b82820290509291505056fea2646970667358221220ca0d93c674238f915f0faa05c0f582c026c1b8a42f4819ff165bacfb3d8e204c64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610123578063be2693f01461012d578063c0f8cffc14610137578063d7b4750c146101745761008e565b80633ccfd60b146100985780636b69a592146100a2578063893d20e8146100cd5780639e87a5cd146100f85761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b6100a06102eb565b005b3480156100ae57600080fd5b506100b76104f5565b6040516100c49190610a24565b60405180910390f35b3480156100d957600080fd5b506100e2610502565b6040516100ef9190610a80565b60405180910390f35b34801561010457600080fd5b5061010d61052a565b60405161011a9190610afa565b60405180910390f35b61012b6101b1565b005b610135610554565b005b34801561014357600080fd5b5061015e60048036038101906101599190610b46565b6107f8565b60405161016b9190610a24565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190610b9f565b610841565b6040516101a89190610a80565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088890919063ffffffff16565b11610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022790610c29565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e29190610c78565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610370576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041b57600080828154811061039557610394610cce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041390610cfd565b915050610373565b50600067ffffffffffffffff81111561043757610436610d46565b5b6040519080825280602002602001820160405280156104655781602001602082028036833780820191505090505b506000908051906020019061047b929190610964565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a290610da6565b60006040518083038185875af1925050503d80600081146104df576040519150601f19603f3d011682016040523d82523d6000602084013e6104e4565b606091505b50509050806104f257600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561065c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610612575b5050505050905060005b81518110156106e757600082828151811061068457610683610cce565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106df90610cfd565b915050610666565b50600067ffffffffffffffff81111561070357610702610d46565b5b6040519080825280602002602001820160405280156107315781602001602082028036833780820191505090505b5060009080519060200190610747929190610964565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161076e90610da6565b60006040518083038185875af1925050503d80600081146107ab576040519150601f19603f3d011682016040523d82523d6000602084013e6107b0565b606091505b50509050806107f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107eb90610e07565b60405180910390fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061085657610855610cce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610894836108c4565b90506000670de0b6b3a764000082866108ad9190610e27565b6108b79190610eb0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610f6e565b5050509150506402540be4008161095c9190610fe9565b915050919050565b8280548282559060005260206000209081019282156109dd579160200282015b828111156109dc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610984565b5b5090506109ea91906109ee565b5090565b5b80821115610a075760008160009055506001016109ef565b5090565b6000819050919050565b610a1e81610a0b565b82525050565b6000602082019050610a396000830184610a15565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6a82610a3f565b9050919050565b610a7a81610a5f565b82525050565b6000602082019050610a956000830184610a71565b92915050565b6000819050919050565b6000610ac0610abb610ab684610a3f565b610a9b565b610a3f565b9050919050565b6000610ad282610aa5565b9050919050565b6000610ae482610ac7565b9050919050565b610af481610ad9565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b600080fd5b610b2381610a5f565b8114610b2e57600080fd5b50565b600081359050610b4081610b1a565b92915050565b600060208284031215610b5c57610b5b610b15565b5b6000610b6a84828501610b31565b91505092915050565b610b7c81610a0b565b8114610b8757600080fd5b50565b600081359050610b9981610b73565b92915050565b600060208284031215610bb557610bb4610b15565b5b6000610bc384828501610b8a565b91505092915050565b600082825260208201905092915050565b7f746f6f206c6f7700000000000000000000000000000000000000000000000000600082015250565b6000610c13600783610bcc565b9150610c1e82610bdd565b602082019050919050565b60006020820190508181036000830152610c4281610c06565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8382610a0b565b9150610c8e83610a0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc357610cc2610c49565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d0882610a0b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3b57610d3a610c49565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d90600083610d75565b9150610d9b82610d80565b600082019050919050565b6000610db182610d83565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610df1601483610bcc565b9150610dfc82610dbb565b602082019050919050565b60006020820190508181036000830152610e2081610de4565b9050919050565b6000610e3282610a0b565b9150610e3d83610a0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7657610e75610c49565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ebb82610a0b565b9150610ec683610a0b565b925082610ed657610ed5610e81565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0081610ee1565b8114610f0b57600080fd5b50565b600081519050610f1d81610ef7565b92915050565b6000819050919050565b610f3681610f23565b8114610f4157600080fd5b50565b600081519050610f5381610f2d565b92915050565b600081519050610f6881610b73565b92915050565b600080600080600060a08688031215610f8a57610f89610b15565b5b6000610f9888828901610f0e565b9550506020610fa988828901610f44565b9450506040610fba88828901610f59565b9350506060610fcb88828901610f59565b9250506080610fdc88828901610f0e565b9150509295509295909350565b6000610ff482610f23565b9150610fff83610f23565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103e5761103d610c49565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561107b5761107a610c49565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110b8576110b7610c49565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110f5576110f4610c49565b5b82820290509291505056fea2646970667358221220ca0d93c674238f915f0faa05c0f582c026c1b8a42f4819ff165bacfb3d8e204c64736f6c63430008080033",
  "devdoc": {
    "author": "Jaffar Totanji",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      },
      "withdraw()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crown funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds the contracts"
      },
      "withdraw()": {
        "notice": "This function allows the owner to withdraw funds"
      }
    },
    "notice": "This contract is a demo used for practice",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}